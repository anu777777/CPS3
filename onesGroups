In a square grid, two cells are connected if they share an edge and share the same value. Sharing an edge is up, down, left and right, but not diagonal. Given a square grid, determine the number of cells in each connected group of 1 values. There will be an array of queries, each one an integer. Create a return array of integers where each element is the number of groups in the matrix that have a size that matches the query.

Example

The input matrix is:
1 1 1 1 1 1
1 1 0 0 0 0
0 0 0 1 1 1
0 0 0 1 1 1
0 0 1 0 0 0
1 0 0 0 0 0

There are 4 connected groups of 1 value, 1 with 8 elements, 1 with 6, and 2 with 1 element. If there are q = 4 queries, queries = [6, 1, 8, 2], the results array is res = [1, 2, 1, 0].

#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);



/*
 * Complete the 'onesGroups' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. 2D_INTEGER_ARRAY grid
 *  2. INTEGER_ARRAY queries
 */
 
 int dfs(vector<vector<int>>& matrix, vector<vector<bool>>& visited, int i, int j, int n) {
    int size = 1; // Initialize size to 1 (counting current cell)

    visited[i][j] = true; // Mark current cell as visited

    // Check adjacent cells
    if (i > 0 && !visited[i-1][j] && matrix[i-1][j] == 1) {
        size += dfs(matrix, visited, i-1, j, n);
    }
    if (j > 0 && !visited[i][j-1] && matrix[i][j-1] == 1) {
        size += dfs(matrix, visited, i, j-1, n);
    }
    if (i < n-1 && !visited[i+1][j] && matrix[i+1][j] == 1) {
        size += dfs(matrix, visited, i+1, j, n);
    }
    if (j < n-1 && !visited[i][j+1] && matrix[i][j+1] == 1) {
        size += dfs(matrix, visited, i, j+1, n);
    }

    return size;
}

vector<int> onesGroups(vector<vector<int>> matrix, vector<int> queries) {
    int n = matrix.size();
    vector<int> res(queries.size(), 0);
    vector<vector<bool>> visited(n, vector<bool>(n, false));
    unordered_map<int, int> groupSizes; // Map of group sizes

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (!visited[i][j] && matrix[i][j] == 1) { // If cell is unvisited and has a value of 1
                int size = dfs(matrix, visited, i, j, n); // Traverse the connected group and get its size
                groupSizes[size]++; // Add the size of the group to the map of group sizes
            }
        }
    }

    for (int i = 0; i < queries.size(); i++) {
        res[i] = groupSizes[queries[i]]; // Get the number of groups with size matching the query
    }

    return res;
}



int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string grid_rows_temp;
    getline(cin, grid_rows_temp);

    int grid_rows = stoi(ltrim(rtrim(grid_rows_temp)));

    string grid_columns_temp;
    getline(cin, grid_columns_temp);

    int grid_columns = stoi(ltrim(rtrim(grid_columns_temp)));

    vector<vector<int>> grid(grid_rows);

    for (int i = 0; i < grid_rows; i++) {
        grid[i].resize(grid_columns);

        string grid_row_temp_temp;
        getline(cin, grid_row_temp_temp);

        vector<string> grid_row_temp = split(rtrim(grid_row_temp_temp));

        for (int j = 0; j < grid_columns; j++) {
            int grid_row_item = stoi(grid_row_temp[j]);

            grid[i][j] = grid_row_item;
        }
    }

    string queries_count_temp;
    getline(cin, queries_count_temp);

    int queries_count = stoi(ltrim(rtrim(queries_count_temp)));

    vector<int> queries(queries_count);

    for (int i = 0; i < queries_count; i++) {
        string queries_item_temp;
        getline(cin, queries_item_temp);

        int queries_item = stoi(ltrim(rtrim(queries_item_temp)));

        queries[i] = queries_item;
    }

    vector<int> result = onesGroups(grid, queries);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
